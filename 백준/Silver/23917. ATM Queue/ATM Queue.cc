/*
ATM 대기열
 
시간 제한 메모리 제한
20 초 (추가 시간 없음) 1024 MB

문제
1부터 N까지 번호가 매겨진 사람들이 ATM에서 돈을 인출하기 위해 줄을 서 있습니다. 
대기열은 번호의 오름차순으로 형성됩니다. 번호가 i인 사람이 금액 Ai를 인출하려고 합니다. 
한 사람이 한 번에 인출할 수 있는 최대 금액은 X입니다. 
X보다 더 많은 금액이 필요한 경우 줄의 맨 끝에 서서 차례를 기다려야 합니다. 
필요한 금액을 인출하면 대기열에서 나가게 됩니다.

모든 사람이 줄을 떠나는 순서를 찾아야 합니다.

입력
입력의 첫 줄은 테스트 케이스 T의 개수입니다. 테스트 케이스는 다음과 같습니다.

각 테스트 케이스의 첫 번째 줄에는 대기열에 서 있는 사람 수 N과 한 번에 인출할 수 있는 최대 금액 X라는 두 개의 공백으로 구분된 정수가 주어집니다.

다음 줄에는 공백으로 구분된 정수 Ai가 주어집니다.

출력
각 테스트 케이스에 대해 케이스 #x: y가 포함된 한 줄을 출력합니다. 여기서 x는 테스트 케이스 번호(1부터 시작)이고 y는 사람들이 대기열을 떠나는 순서를 나타내는 공백으로 구분된 정수 목록입니다.

제한
1 ≤ t ≤ 100.
테스트 세트 1(5점)
1 ≤ N ≤ 100.
1 ≤ Ai ≤ 100.
1 ≤ X ≤ 100.
테스트 세트 2(8점)
1 ≤ N ≤ 105(최대 10개 테스트 케이스). 나머지 케이스의 경우 1 ≤ N ≤ 100
1 ≤ Ai ≤ 109.
1 ≤ X ≤ 109.
예제 입력 1 
2
3 3
2 7 4
5 6
9 10 4 7 2
예제 출력 1 
Case #1: 1 3 2
Case #2: 3 5 1 2 4

힌트
예제 사례 #1에서는 3명이 있고 한 번에 인출할 수 있는 제한은 3입니다. 아래는 프로세스가 어떻게 진행되는지 단계별로 설명한 것입니다:

대기열은 처음에 [1, 2, 3]처럼 보입니다. 첫 번째 사람이 첫 번째 시도에서 2를 인출하고 대기열을 떠납니다.
이제 대기열은 [2, 3]과 같이 보입니다. 두 번째 사람은 7의 금액을 인출하고 싶지만 첫 번째 턴에는 3만 인출할 수 있습니다. 여전히 4의 금액을 인출해야 하므로 줄의 끝에서 대기열에 다시 참여해야 합니다.
이제 대기열은 [3, 2]처럼 보입니다. 세 번째 사람은 4의 금액을 인출해야 하지만 첫 번째 턴에는 3만 인출할 수 있으므로 나중에 1의 금액을 인출하기 위해 줄의 끝에 다시 대기열에 합류합니다.
이제 대기열은 [2, 3]처럼 보입니다. 두 번째 사람은 여전히 4를 인출해야 합니다. 두 번째 차례에 3을 인출하고 다음 차례가 올 때까지 기다렸다가 남은 1을 인출합니다.
이제 대기열은 [3, 2]와 같이 보입니다. 세 번째 사람이 남은 금액 1을 인출하고 대기열을 떠납니다.
이제 대기열은 [2]처럼 보입니다. 두 번째 사람이 남은 금액 1을 인출하고 대기열을 떠납니다.
이제 대기열이 비어 있습니다.
사람들이 대기열을 떠나는 순서는 [1, 3, 2]입니다.

샘플 사례 2에는 5명이 있고 한 번에 인출할 수 있는 한도는 6명입니다. 다음은 프로세스가 어떻게 진행되는지 단계별로 설명합니다:

대기열은 처음에 [1, 2, 3, 4, 5]처럼 보입니다. 첫 번째 사람이 6을 인출하고 마지막에 다시 합류하여 나중에 남은 3을 인출합니다.
대기열은 [2, 3, 4, 5, 1]처럼 보입니다. 두 번째 사람도 마찬가지로 6의 금액을 인출하고 다음 차례를 기다려 4의 금액을 인출합니다.
대기열은 [3, 4, 5, 1, 2]와 같이 보입니다. 세 번째 사람이 4를 인출하고 대기열을 떠납니다.
이제 대기열은 [4, 5, 1, 2]처럼 보입니다. 네 번째 사람이 6을 인출하고 다음 차례를 기다립니다.
대기열은 [5, 1, 2, 4]처럼 보입니다. 다섯 번째 사람이 2를 인출하고 대기열을 떠납니다.
대기열은 [1, 2, 4]와 같이 보입니다. 이제 다른 모든 사람들이 두 번째 차례가 끝나면 한 명씩 대기열을 떠납니다.
사람들이 대기열을 떠나는 순서는 [3, 5, 1, 2, 4]입니다.
*/

#include <bits/stdc++.h>
using namespace std;

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int T;
    cin >> T;
    for(int tc = 1; tc <= T; tc++){
        long long N, X;
        cin >> N >> X;
        vector<long long> A(N);
        for(int i = 0; i < N; i++){
            cin >> A[i];
        }

        vector<pair<long long,int>> v;
        v.reserve(N);
        for(int i = 0; i < N; i++){
            long long turns = (A[i] + X - 1) / X;
            v.emplace_back(turns, i+1);
        }

        sort(v.begin(), v.end());

        cout << "Case #" << tc << ":";
        for(auto &p : v){
            cout << ' ' << p.second;
        }
        cout << "\n";
    }
    return 0;
}
