/*
특별상 눈치게임
 
시간 제한	메모리 제한
1 초 (추가 시간 없음)	1024 MB (추가 메모리 없음)
문제
당신의 팀을 포함해 총 N+1개의 팀이 특별상을 받기 위해 눈치게임을 시작했다! 눈치게임의 규칙은 다음과 같다.

각 팀은 1 이상 100 이하의 서로 다른 정수를 3개 선택해서 제출한다.
두 팀 이상이 선택한 수를 모두 제거한다. 이때 제출된 수들이 모두 제거되면 특별상은 사회에 환원된다.
100에 가장 가까운 수를 선택한 팀이 특별상의 주인공이 된다.
예를 들어, A팀이 (1,50,100), B팀이 (2,99,100), C팀이 (3,97,98), D팀이 (2,4,50)을 선택했다고 하자. 두 팀 이상이 선택한 2,50,100은 추첨에서 제외되므로, 남은 수 중 100과 가장 가까운 수인 99를 선택한 B팀이 특별상의 주인공이 된다.

당신은 은밀한 방법으로 다른 N개 팀이 선택한 수들을 전부 파악했다! 이제 남은 일은 제출할 3개의 정수를 최선을 다해 고르는 것뿐이다. 특별상을 노리기 위해, 가능한 조합들을 치밀하게 계산해보려 한다. 당신의 팀이 선택할 수 있는 정수 조합 중 특별상을 받을 수 있는 경우의 수를 구해보자. 단, 순서만 다른 조합은 같은 경우로 센다.

입력
첫째 줄에 자신의 팀을 제외한 참가 팀의 수 N이 주어진다.

둘째 줄부터 N개의 줄에 걸쳐 다른 팀에서 고른 3개의 수 A_i,B_i,C_i가 공백으로 구분되어 주어진다.

출력
당신의 팀이 선택할 수 있는 정수 조합 중 특별상을 받을 수 있는 경우의 수를 구해보자.

제한
 1\leq N\leq 100 
 1\le A_i,B_i,C_i\le 100 (1\le i\le N)
 A_i\ne B_i;B_i\ne C_i;C_i\ne A_i (1\le i\le N)
입력으로 주어지는 수는 모두 정수이다.
예제 입력 1 
1
1 99 100
예제 출력 1 
97
당신의 팀이 특별상을 받기 위해서는 99와 100을 선택해 제거한 뒤, 2 이상 98 이하의 정수를 추가로 선택하면 된다.

예제 입력 2 
1
100 99 98
예제 출력 2 
0
당신의 팀이 특별상을 받을 수 있는 경우의 수는 없지만, 특별상의 행방은 당신에게 달려있다.

예제 입력 3 
3
37 99 73
17 76 100
87 96 51
예제 출력 3 
2
*/

#include <bits/stdc++.h>
using namespace std;

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int N;
    if(!(cin >> N)) return 0;
    vector<int> orig(101,0);
    for(int i=0;i<N;i++){
        int x,y,z;
        cin >> x >> y >> z;
        orig[x]++; orig[y]++; orig[z]++;
    }

    long long ans = 0;
    for(int a=1;a<=98;a++){
        for(int b=a+1;b<=99;b++){
            for(int c=b+1;c<=100;c++){
                int max_unique = 0;
                for(int i=100;i>=1;i--){
                    int cur = orig[i];
                    if(i==a) cur++;
                    if(i==b) cur++;
                    if(i==c) cur++;
                    if(cur == 1){
                        max_unique = i;
                        break;
                    }
                }
                if(max_unique == 0) continue; // no unique picks -> no winner
                if(max_unique==a || max_unique==b || max_unique==c) ans++;
            }
        }
    }

    cout << ans << '\n';
    return 0;
}
