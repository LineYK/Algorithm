/*
쇼핑
 
시간 제한 메모리 제한
1초 256MB

문제
친구가 쇼핑을 즐기고 있습니다. 그녀는 1부터 N까지 번호가 매겨진 N개의 개별 상점이 일정한 간격으로 정렬되어 있는 직선 거리를 따라 쇼핑몰을 걷고 있습니다. 각 상점에는 문이 하나씩 있으며 길의 한쪽에 위치해 있습니다. 인접한 상점의 문 사이의 거리는 같은 길이, 즉 단위 길이입니다. 쇼핑몰 입구에서 쇼핑을 시작한 그녀는 상품을 구매하기 위해 상점을 방문합니다. 쇼핑을 마친 후 쇼핑몰 출구로 나가야 합니다.

그녀는 상점 방문 순서에 몇 가지 제한이 필요합니다. 각 제한 사항은 그녀가 다른 상점을 방문하기 전에 한 상점을 방문해야 함을 나타냅니다. 예를 들어, 하이힐을 고르기 전에 멋진 드레스를 사고 싶다면 신발 가게를 방문하기 전에 부티크를 방문해야 합니다. 부티크가 신발 가게보다 멀면 부티크 방문 전에 신발 가게를 지나쳐야 하고, 부티크 방문 후에는 다시 신발 가게로 돌아가야 합니다.

방문하는 상점의 순서만 모든 제한 조건을 만족한다면, 그녀는 원하는 순서대로 다른 상점들을 방문할 수 있습니다.

그녀가 입구에서 출구까지 이동하는 데 필요한 최소 보행 길이를 구하는 프로그램을 작성합니다.

번호가 k인 상점의 문 위치는 입구에서 k 단위로 떨어져 있고, 출구의 위치는 입구에서 N + 1 단위로 떨어져 있다고 가정합니다.

입력
입력은 단일 테스트 케이스로 구성됩니다.

N m
c1 d1
.
.
.
cm dm
첫 번째 줄에는 두 개의 정수 N과 m이 포함되며, 여기서 N(1 ≤ N ≤ 1000)은 상점 수, m(0 ≤ m ≤ 500)은 제한 횟수입니다. 다음 m 줄에는 각각 두 개의 정수 ci와 di(1 ≤ ci < di ≤ N)가 포함되며, 이는 방문 순서에 대한 i 번째 제한을 나타내며, i = 1, ... , m인 상점을 방문한 후 ci 번호의 상점을 방문해야 합니다.

cj = ck, dj = dk를 만족하는 j와 k의 쌍은 존재하지 않습니다.

출력
그녀가 입구에서 출구까지 이동하는 데 필요한 최소 보행 길이를 출력합니다. 상점 내부에서의 보행 길이는 생략해야 합니다.

예제 입력 1 
10 3
3 7
8 9
2 5
예제 출력 1 
23
예제 입력 2 
10 3
8 9
6 7
2 4
예제 출력 2 
19
예제 입력 3 
10 0
예제 출력 3 
11
예제 입력 4 
10 6
6 7
4 5
2 5
6 9
3 5
6 8
예제 출력 4 
23
예제 입력 5 
1000 8
3 4
6 1000
5 1000
7 1000
8 1000
4 1000
9 1000
1 2
예제 출력 5 
2997
*/

#include <bits/stdc++.h>
using namespace std;

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N, M;
    cin >> N >> M;

    vector<pair<int,int>> segs;
    for(int i = 0; i < M; i++){
        int c, d;
        cin >> c >> d;
        segs.emplace_back(c, d);
    }

    if(segs.empty()){
        cout << (N + 1) << "\n";
        return 0;
    }

    sort(segs.begin(), segs.end());

    long long extra = 0;
    int L = segs[0].first, R = segs[0].second;
    for(int i = 1; i < M; i++){
        auto [l, r] = segs[i];
        if(l <= R){
            R = max(R, r);
        } else {
            extra += (R - L);
            L = l;
            R = r;
        }
    }
    extra += (R - L);

    long long answer = (long long)(N + 1) + 2LL * extra;
    cout << answer << "\n";
    return 0;
}