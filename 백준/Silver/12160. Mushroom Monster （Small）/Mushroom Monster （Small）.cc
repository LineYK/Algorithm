/*
버섯 괴물 (작은)
 
시간 제한 메모리 제한
5초 512MB
문제
케일린은 버섯을 좋아합니다. 버섯을 접시에 올려주면 다 먹어치워요! 이 문제에서 그녀는 버섯 한 접시를 먹고 있고, 바르톨로메오는 버섯을 접시에 더 얹어주고 있습니다.

이 문제에서는 10초 간격으로 접시에 버섯 조각이 몇 개나 있는지 살펴볼 것입니다. 바르톨로메오는 언제든지 음수가 아닌 정수의 버섯 조각을 내려놓을 수 있으며, 버섯 조각이 접시에서 벗어날 수 있는 유일한 방법은 먹어버리는 것입니다.

두 가지 다른 계산 방법을 사용하여 케일린이 먹을 수 있는 버섯의 최소 개수를 구합니다:

케일린이 언제든지 버섯 조각을 얼마든지 먹을 수 있다고 가정합니다.
접시를 처음 볼 때부터 접시에 버섯이 있을 때마다 일정한 비율로 버섯을 먹는다고 가정합니다.
예를 들어 입력값이 10 5 15 5인 경우:

첫 번째 방법을 사용하면 먼저 5개를 먹고 접시에 10개를 더 올린 다음 10개를 더 먹는 식으로 케일린은 최소 15개의 버섯을 먹어야 합니다. 더 적게 먹었을 가능성은 전혀 없습니다.

두 번째 방법을 사용하면 케일린은 최소 25개의 버섯 조각을 먹었을 것입니다. 우리는 그녀가 초당 최소 1개씩의 속도로 버섯을 먹어야 한다는 것을 알 수 있습니다. 그녀는 접시에 10조각으로 시작합니다. 처음 10초 동안 10개를 먹은 후 5개를 더 접시에 담습니다. 다음 5초 동안 5개를 먹은 후 5초 동안 접시가 비어 있으면 바르톨로뮤가 15개를 더 접시에 담습니다. 그리고 마지막 10초 동안 10개를 먹습니다.

입력
입력의 첫 줄은 테스트 케이스의 개수, T. T 테스트 케이스가 이어집니다. 각각은 단일 정수 N이 포함된 한 줄과 공백으로 구분된 정수 mi, 시작 시와 10초 간격으로 케일린의 접시에 있는 버섯의 개수가 포함된 한 줄로 구성됩니다.

제한값
1 ≤ T ≤ 100.
2 ≤ N ≤ 10.
0 ≤ mi ≤ 100.
출력
각 테스트 케이스에 대해 "Case #x: y z"가 포함된 한 줄을 출력합니다. 여기서 x는 테스트 케이스 번호(1부터 시작), y는 케일린이 첫 번째 계산 방법을 사용하여 먹을 수 있었던 버섯의 최소 개수, z는 두 번째 계산 방법을 사용하여 먹을 수 있었던 버섯의 최소 개수입니다.

예제 입력 1 
4
4
10 5 15 5
2
100 100
8
81 81 81 81 81 0
6
23 90 40 0 100 9
예제 출력 1 
사례 #1: 15 25
사례 #2: 0 0
사례 #3: 81 567
사례 #4: 181 244
*/

#include <bits/stdc++.h>
using namespace std;

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    
    int T;
    cin >> T;
    for(int t = 1; t <= T; t++){
        int N;
        cin >> N;
        vector<int> mushrooms(N);
        for (int i = 0; i < N; i++){
            cin >> mushrooms[i];
        }
        
        int method1 = 0;
        for(int i = 0; i < N - 1; i++){
            if(mushrooms[i] > mushrooms[i+1])
                method1 += mushrooms[i] - mushrooms[i+1];
        }
        
        int maxDrop = 0;
        for(int i = 0; i < N - 1; i++){
            maxDrop = max(maxDrop, mushrooms[i] - mushrooms[i+1]);
        }
        
        int method2 = 0;
        for(int i = 0; i < N - 1; i++){
            method2 += min(mushrooms[i], maxDrop);
        }
        
        cout << "Case #" << t << ": " << method1 << " " << method2 << "\n";
    }


    return 0;
}