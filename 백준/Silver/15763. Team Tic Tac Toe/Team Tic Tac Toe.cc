/*
팀 틱택 토 
 
시간 제한 메모리 제한
2 초 512 MB

문제
농부 존은 26마리의 소를 소유하고 있는데, 우연히도 모두 알파벳의 다른 글자로 시작하는 이름을 가지고 있어서 농부 존은 보통 각 소의 첫 이니셜인 A \ldots Z 범위의 문자를 사용하여 소를 지칭합니다.

소들은 최근 틱택토 게임에 매료되었지만 한 번에 두 마리만 플레이할 수 있다는 사실이 마음에 들지 않아 여러 마리가 한 번에 플레이할 수 있는 변형을 발명했습니다! 일반 틱택토와 마찬가지로 3×3 보드에서 게임을 진행하지만, 각 사각형에는 X와 O 대신 해당 사각을 차지한 소의 이니셜을 나타내기 위해 A\점 Z 범위의 단일 문자가 표시되어 있습니다.

게임 보드의 예는 다음과 같습니다:

COW
XXO
ABC
소는 9개의 사각형을 각각 채우고 누가 게임에서 이겼는지 알아내는 방법을 혼란스러워합니다. 분명히 일반 틱택토와 마찬가지로 한 소가 행, 열 또는 대각선 전체를 차지한 경우 그 소는 혼자서 승리를 주장할 수 있습니다. 그러나 소들은 플레이어 수가 많기 때문에 그럴 가능성이 낮다고 생각하여 소들이 두 명으로 팀을 구성할 수 있도록 허용하기로 결정하고, 두 소로 구성된 팀은 행, 열 또는 대각선이 팀에 속한 두 소의 문자로만 구성되어 있고, 더 나아가 이 행, 열 또는 대각선에 한 명이 아닌 두 소의 문자가 모두 사용되면 승리를 주장할 수 있습니다.

소들이 개인 또는 두 마리의 소로 구성된 팀이 승리를 차지할 수 있는 수를 알아내도록 도와주세요. 게임 보드의 동일한 사각형이 여러 가지 다른 승리 주장에 사용될 수 있다는 점에 유의하세요.

입력
입력은 세 줄로 구성되며, 각 줄은 A \점 Z 범위의 세 글자입니다.

출력
출력은 두 줄로 구성되어야 합니다. 첫 번째 줄에는 승리를 주장할 수 있는 개별 소의 수를 출력합니다. 두 번째 줄에는 승리를 주장할 수 있는 소 두 마리 팀의 수를 출력합니다.

예제 입력 1 
COW
XXO
ABC
예제 출력 1 
0
2
힌트
이 예제에서는 한 마리의 소가 승리를 주장할 수 없습니다. 그러나 소 C와 X가 팀을 이루면 C-X-C 대각선을 통해 승리할 수 있습니다. 또한 소 X와 O가 팀을 이루면 가운데 줄을 통해 승리할 수 있습니다.
*/

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    vector<string> board(3);
    for (int i = 0; i < 3; i++) {
        cin >> board[i];
    }

    vector<vector<pair<int,int>>> lines = {
        // 가로 3줄
        { {0,0}, {0,1}, {0,2} },
        { {1,0}, {1,1}, {1,2} },
        { {2,0}, {2,1}, {2,2} },
        // 세로 3줄
        { {0,0}, {1,0}, {2,0} },
        { {0,1}, {1,1}, {2,1} },
        { {0,2}, {1,2}, {2,2} },
        // 대각선 2줄
        { {0,0}, {1,1}, {2,2} },
        { {0,2}, {1,1}, {2,0} }
    };

    set<char> soloWinners;
    set<pair<char,char>> teamWinners;

    for (auto &line : lines) {
        set<char> chars;
        for (auto &p : line) {
            chars.insert(board[p.first][p.second]);
        }
        if (chars.size() == 1) {
            soloWinners.insert(*chars.begin());
        }
        else if (chars.size() == 2) {
            auto it = chars.begin();
            char a = *it; ++it;
            char b = *it;
            if (a > b) swap(a,b);
            teamWinners.emplace(a,b);
        }
    }

    cout << soloWinners.size() << "\n";
    cout << teamWinners.size() << "\n";

    return 0;
}