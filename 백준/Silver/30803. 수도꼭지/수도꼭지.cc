/*
수도꼭지
 
시간 제한   메모리 제한
2 초   1024 MB   

문제
물탱크와 연결된 N개의 수도꼭지가 있습니다. 이 수도꼭지는 나사와 토글 버튼으로 이루어져 있습니다. 나사를 돌려서 나오는 물의 양을 조절할 수 있고, 토글 버튼을 눌러서 수도꼭지를 열거나 잠글 수 있습니다. 물탱크에 담기는 물의 양은 열려있는 수도꼭지들에서 내보내는 물의 양의 합입니다.

구체적으로는 수도꼭지에 다음 조작을 할 수 있습니다.

나사를 돌려서 수도꼭지가 열려 있을 때 1분에 x리터의 물을 내보내도록 합니다.
토글 버튼을 누릅니다. 수도꼭지가 열려 있으면 잠그고, 잠겨있으면 엽니다.
가장 처음에 모든 수도꼭지는 열려있으며, i번째 수도꼭지는 1분에 A_i리터의 물을 내보내고 있습니다. 이 수도꼭지들을 Q번 조작할 것입니다. 가장 처음에, 그리고 매 조작 이후에 1분 동안 탱크에 담기는 물의 양을 계산하세요.

입력
첫 줄에 수도꼭지의 수 N이 주어집니다. (1\leq N\leq 200\, 000) 

둘째 줄에 처음에 수도꼭지에서 나오는 물의 양을 의미하는 A_1,A_2,\cdots ,A_N이 공백으로 구분되어 주어집니다. (1\le A_i\le 10^9) 

셋째 줄에 조작의 수 Q가 주어집니다. (1\leq Q\leq 200\, 000) 

넷째 줄부터 Q개의 줄에 조작이 한 줄에 하나씩 주어집니다. 각 조작은 다음 중 하나로 주어집니다.

 1,i,x가 공백으로 구분되어 주어집니다. 이는 i번째 수도꼭지의 나사를 돌려서 1분에 x리터의 물을 내보내도록 했다는 의미입니다. (1\le i\le N; 1\le x\le 10^9) 
 2,i가 공백으로 구분되어 주어집니다. 이는 i번째 수도꼭지의 토글 버튼을 눌렀다는 의미입니다. (1\leq i\leq N) 
입력으로 주어지는 모든 수는 정수입니다.

출력
총 (Q+1)개의 줄을 출력합니다. 첫 줄에는 아무 조작도 하지 않았을 때 1분 동안 탱크에 담기는 물의 양을 리터 단위로 출력하세요. 다음 Q개의 줄의 i번째 줄에는, i번째 조작까지 끝낸 이후 1분 동안 탱크에 담기는 물의 양을 리터 단위로 출력하세요.

예제 입력 1 
3
6 1 4
4
2 1
2 3
1 2 3
2 3
예제 출력 1 
11
5
1
3
7
어떠한 조작도 하기 전에는 탱크에 1분당 6+1+4=11리터 만큼의 물이 담기게 됩니다.
 1번째 조작으로 1번째 수도꼭지의 버튼을 눌러 수도꼭지를 잠급니다. 이제 탱크에 1분당 1+4=5리터 만큼의 물이 담기게 됩니다.
 2번째 조작으로 3번째 수도꼭지의 버튼을 눌러 수도꼭지를 잠급니다. 이제 탱크에 1분당 1리터 만큼의 물이 담기게 됩니다.
 3번째 조작으로 2번째 수도꼭지의 나사를 돌려 1분당 3리터의 물을 내보내도록 합니다. 이제 탱크에 1분당 3리터 만큼의 물이 담기게 됩니다.
 4번째 조작으로 3번째 수도꼭지의 버튼을 눌러 수도꼭지를 엽니다. 이제 탱크에 1분당 3+4=7리터 만큼의 물이 담기게 됩니다.
예제 입력 2 
5
1000000000 1000000000 1000000000 1000000000 1000000000
4
1 1 999999999
2 1
1 1 999999998
2 1
예제 출력 2 
5000000000
4999999999
4000000000
4000000000
4999999998
답이 일반적으로 사용하는 32비트 정수 범위를 넘어갈 수 있음에 유의하세요.

노트
입출력 양이 많으므로 빠른 입출력 방법을 사용하는 것을 권장합니다.
*/

#include <bits/stdc++.h>
using namespace std;

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N;
    cin >> N;
    vector<long long> A(N+1);
    for(int i = 1; i <= N; i++){
        cin >> A[i];
    }
    long long total = 0;
    vector<bool> open(N+1, true);
    for(int i = 1; i <= N; i++){
        total += A[i];
    }

    cout << total << "\n";

    int Q;
    cin >> Q;
    while(Q--){
        int type, i;
        cin >> type >> i;
        if(type == 1){
            long long x;
            cin >> x;
            if(open[i]){
                total += (x - A[i]);
            }
            A[i] = x;
        } else {
            if(open[i]){
                open[i] = false;
                total -= A[i];
            } else {
                open[i] = true;
                total += A[i];
            }
        }
        cout << total << "\n";
    }
    return 0;
}
