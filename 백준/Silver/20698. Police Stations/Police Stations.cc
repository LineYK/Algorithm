/*
경찰서
 
시간 제한 메모리 제한
1초 512MB

문제
플랫랜드에는 N개의 경찰서가 있으며, ith 경찰서는 좌표(xi, yi)에 위치해 있습니다. 
당국은 경찰서 간에 종종 발생하는 잘못된 의사소통을 줄여 경찰서 간의 시너지 효과를 높이려고 합니다. 
이를 위해 당국은 통신 관제 센터(CCC) 역할을 할 새로운 타워를 건설하기로 결정했습니다. 
CCC는 x와 y가 모두 정수인 (x, y)에만 구축할 수 있다는 점에 유의하세요. 
(x, y)에 이미 경찰서가 있는지 여부는 중요하지 않으며, 해당 경찰서와 함께 CCC를 건설할 수 있습니다.

그런 다음 CCC는 몇 가지 제한을 두고 각 경찰서에 통신 케이블을 연결합니다.

각 케이블은 하나의 경찰서에만 연결되므로 N개의 경찰서에 서비스를 제공하려면 N개의 케이블이 필요합니다.
케이블은 X축과 Y축에 평행하게만 배치할 수 있으며 대각선으로 교차하는 것은 허용되지 않습니다.
플랫랜드의 이상한 물리 법칙으로 인해 각 케이블의 길이는 x축 방향으로는 최대 L, y축 방향으로는 최대 W까지만 가능하며, 
이것이 플랫랜드에서 이러한 유형의 케이블을 hL, Wi 케이블이라고 부르는 이유입니다. 
안정적인 통신을 위해서는 모든 경찰서가 동일한 유형의 케이블로 연결되어야 합니다.

최근 플랫랜드의 과학 기술 발전으로 물리학자들은 비용을 지불하면 
원하는 L과 W를 위한 hL, Wi 케이블을 구축할 수 있습니다. L과 W가 커질수록 비용이 많이 들기 때문에, 
당국은 모든 경찰서를 CCC로 연결하면서 L + W의 값을 최소화할 수 있는, 
즉 그들의 요구를 만족시킬 수 있는 L과 W를 찾아야 합니다.

이 문제에서 여러분의 임무는 L + W의 값이 최소가 되도록 L과 W를 구하고, 
모든 경찰서를 hL, Wi 케이블로 CCC에 연결할 수 있으면서 
당국이 x와 y가 모두 정수인 (x, y)에서 CCC를 구축할 수 있도록 하는 것입니다. 
솔루션이 여러 개 있는 경우 L을 먼저 최소화한 다음 W를 최소화합니다.

입력
입력은 정수가 포함된 줄로 시작합니다: 
플랫랜드의 경찰서 수를 나타내는 N(1 ≤ N ≤ 100,000)이 들어 있는 줄로 시작합니다. 
다음 N개의 선은 각각 각 경찰서의 위치를 나타내는 두 개의 정수, 
즉 xi yi (-10^6 ≤ xi, yi ≤ 10^6)를 포함합니다.

출력
L + W의 값이 최소가 되도록 각각 두 개의 정수 (한 칸으로 구분)인 L과 W를 한 줄에 출력하고, 
모든 경찰서를 hL, Wi 케이블로 CCC에 연결할 수 있는 동안 
당국은 x와 y가 모두 정수가 되는 (x, y)에 CCC를 구축할 수 있습니다. 
솔루션이 여러 개 있는 경우 L을 먼저 최소화한 다음 W를 최소화합니다.

예제 입력 1 
5
20 90
-10 40
90 20
50 -30
50 70
예제 출력 1 
50 60
당국이 내릴 수 있는 최적의 결정은 (40, 30)에 CCC를 건설하고 모든 경찰서를 CCC에 연결하기 위해 
h50, 60i 케이블을 준비하는 것입니다.

예제 입력 2 
2
120 740
122 749
예제 출력 2 
1 5
최소 L+W를 확보하려면 CCC를 (121, 744) 또는 (121, 745)에 구축해야 합니다. 어느 쪽이든 두 경찰서를 CCC에 연결하려면 h1, 5i 케이블이 필요합니다.

예제 입력 3 
5
-30 -7
2 80
23 15
31 30
92 -20
예제 출력 3 
61 50
당국이 내릴 수 있는 최적의 결정은 (31, 30)에 CCC를 구축하고 모든 경찰서를 CCC에 연결하기 위해 h61, 50i 케이블을 준비하는 것입니다.
*/

#include <bits/stdc++.h>

using namespace std;

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int N;
    cin >> N;

    int max_x = INT32_MIN, max_y = INT32_MIN;
    int min_x = INT32_MAX, min_y = INT32_MAX;

    for (int i = 0; i < N; i++)
    {
        int x, y;
        cin >> x >> y;
        max_x = max(max_x, x);
        max_y = max(max_y, y);
        min_x = min(min_x, x);
        min_y = min(min_y, y);
    }

    int L = (max_x - min_x + 1) / 2;
    int W = (max_y - min_y + 1) / 2;

    cout << L << " " << W << "\n";

    return 0;
}
